# -*- coding: utf-8 -*-
"""Data Toolkit Assignment by Maroofa Roohan

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qz_VBUOvUb3veM0Xf4Om0NO6QXHvYqeB
"""

import pandas as pd

pd.read_csv("People Data.csv")pd.read_csv("People Data.csv")

import pandas as pd
import numpy as np

# Generate first Series (random numbers between 10 and 50)
series1 = pd.Series(np.random.randint(10, 51, size=50))

# Generate second Series (random numbers between 100 and 1000)
series2 = pd.Series(np.random.randint(100, 1001, size=50))

# Create DataFrame by joining both Series
df = pd.DataFrame({'col1': series1, 'col2': series2})

# Display the DataFrame
print(df)

df = pd.read_csv("People Data.csv")

df

#. Demonstrate three methods for creating identical 2D arrays in NumPy
import numpy as np

# Method 1: Using np.array
array_1 = np.array([[1, 2], [3, 4]])
print("Method 1:\n", array_1)

# Method 2: Using np.full to fill with a constant value
array_2 = np.full((2, 2), 1)  # Replace 1 with different values as needed
print("Method 2:\n", array_2)

# Method 3: Using np.zeros and then filling manually
array_3 = np.zeros((2, 2))
array_3[0, :] = [1, 2]
array_3[1, :] = [3, 4]
print("Method 3:\n", array_3)

#2. Generate an array of 100 evenly spaced numbers between 1 and 10, then reshape it to 2D
array_1D = np.linspace(1, 10, 100)
array_2D = array_1D.reshape(10, 10)  # Reshaping into a 10x10 2D array
print("Reshaped 2D Array:\n", array_2D)

#3. Difference between np.array, np.asarray, and np.asanyarray
#np.array: Always returns a copy of the input data, even if it's already an array.
#np.asarray: Converts the input to an array, but doesn’t copy the data if it’s already an array.
#np.asanyarray: Similar to np.asarray, but passes subtypes (e.g., np.matrix) without conversion to base ndarray.

#4. Difference between deep copy and shallow copy
#Shallow Copy: Copies the reference to the object, meaning changes in the copied object can affect the original object.
#Deep Copy: Creates a completely independent copy of the object, so changes to the copied object don't affect the original.

#5. Generate a 3x3 array with random floating-point numbers between 5 and 20, round to 2 decimal places
random_array = np.random.uniform(5, 20, (3, 3))
rounded_array = np.round(random_array, 2)
print("Random 3x3 Array (Rounded):\n", rounded_array)

#6. Create a 5x6 NumPy array with random integers between 1 and 10, extract even and odd integers
random_array = np.random.randint(1, 11, (5, 6))
even_integers = random_array[random_array % 2 == 0]
odd_integers = random_array[random_array % 2 != 0]
print("Even Integers:\n", even_integers)
print("Odd Integers:\n", odd_integers)

#7. Create a 3D NumPy array and perform operations
# Create a 3D array with random integers between 1 and 10
array_3D = np.random.randint(1, 11, (3, 3, 3))

# Find indices of max values along each depth (axis=2)
max_indices = np.argmax(array_3D, axis=2)
print("Indices of Max Values:\n", max_indices)

# Element-wise multiplication
result = array_3D * array_3D
print("Element-wise Multiplication:\n", result)

#8. Clean and transform the 'Phone' column in the People dataset
#Assuming the file you uploaded is /mnt/data/People Data.csv, I will load and process it using pandas.
import pandas as pd
df = pd.read_csv("People Data.csv")


# Clean 'Phone' column: Remove non-numeric characters and convert to numeric
df['Phone'] = df['Phone'].str.replace(r'\D', '', regex=True).astype(float)

# Display table attributes and data types
print(df.dtypes)
print(df.head())  # Show the cleaned dataset

#Perform tasks on 'data.csv' (skip first 50 rows, filter columns
# Load the dataset while skipping the first 50 rows
df_filtered = pd.read_csv('People Data.csv', skiprows=range(1, 51))

# Read only specified columns
df_filtered = df_filtered[['Last Name', 'Gender', 'Email', 'Phone', 'Salary']]

# Display first 10 rows
print(df_filtered.head(10))

# Extract 'Salary' column and display last 5 values
print(df_filtered['Salary'].tail(5))

#10. Filter dataset based on conditions
filtered_df = df_filtered[(df_filtered['Last Name'].str.contains('Duke')) &
                          (df_filtered['Gender'] == 'Female') &
                          (df_filtered['Salary'] < 85000)]
print(filtered_df)

#7x5 DataFrame in pandas using a series of 35 random integers between 1 and 6:
import pandas as pd
import numpy as np

# Generate a series of 35 random integers between 1 and 6
random_integers = np.random.randint(1, 7, 35)

# Reshape it into a 7x5 array and create a DataFrame
df = pd.DataFrame(random_integers.reshape(7, 5))

# Display the DataFrame
print(df)

#The two different series and combine them into a DataFrame with the specified column names:
import pandas as pd
import numpy as np

# Create the first Series with random numbers ranging from 10 to 50
series_1 = pd.Series(np.random.randint(10, 51, 50))

# Create the second Series with random numbers ranging from 100 to 1000
series_2 = pd.Series(np.random.randint(100, 1001, 50))

# Create a DataFrame by joining the two Series and rename the columns
df = pd.DataFrame({'col1': series_1, 'col2': series_2})

# Display the DataFrame
print(df)

# Perform the following operations using people data set:

#a) Delete the 'Email', 'Phone', and 'Date of birth' columns from the dataset.

#b) Delete the rows containing any missing values.

#d) Print the final output also&

import pandas as pd

# Load the dataset
df = pd.read_csv('People Data.csv')

# a) Delete the 'Email', 'Phone', and 'Date of birth' columns
df = df.drop(columns=['Email', 'Phone', 'Date of birth'], errors='ignore')

# b) Delete the rows containing any missing values
df_cleaned = df.dropna()

# d) Print the final output
print(df_cleaned)

# Create two NumPy arrays, x and y, each containing 100 random float values between 0 and 1. Perform the
#following tasks using Matplotlib and NumPy:

#a) Create a scatter plot using x and y, setting the color of the points to red and the marker style to 'o'.

#b) Add a horizontal line at y = 0.5 using a dashed line style and label it as 'y = 0.5'.

#c) Add a vertical line at x = 0.5 using a dotted line style and label it as 'x = 0.5'.

#d) Label the x-axis as 'X-axis' and the y-axis as 'Y-axis'.

#e) Set the title of the plot as 'Advanced Scatter Plot of Random Values'.

#f) Display a legend for the scatter plot, the horizontal line, and the vertical line.
import numpy as np
import matplotlib.pyplot as plt

# Create two NumPy arrays containing 100 random float values between 0 and 1
x = np.random.rand(100)
y = np.random.rand(100)

# Create a scatter plot using x and y
plt.scatter(x, y, color='red', marker='o', label='Random points')

# Add a horizontal line at y = 0.5 with a dashed line style
plt.axhline(y=0.5, color='blue', linestyle='--', label='y = 0.5')

# Add a vertical line at x = 0.5 with a dotted line style
plt.axvline(x=0.5, color='green', linestyle=':', label='x = 0.5')

# Label the axes
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# Set the title of the plot
plt.title('Advanced Scatter Plot of Random Values')

# Display the legend
plt.legend()

# Show the plot
plt.show()

#Plot the 'Temperature' and 'Humidity' on the same plot with different y-axes (left y-axis for 'Temperature' and
#ight y-axis for 'Humidity').

#b) Label the x-axis as 'Date'.

#c) Set the title of the plot as 'Temperature and Humidity Over Time'.g Create a time-series dataset in a Pandas DataFrame with columns: 'Date', 'Temperature', 'Humidity' and
#Perform the following tasks using Matplotlib:

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Create a time-series dataset
date_range = pd.date_range(start='2024-01-01', periods=100, freq='D')  # 100 days from start date
temperature = np.random.uniform(15, 35, 100)  # Random temperatures between 15°C and 35°C
humidity = np.random.uniform(40, 80, 100)     # Random humidity values between 40% and 80%

# Create a DataFrame
df = pd.DataFrame({
    'Date': date_range,
    'Temperature': temperature,
    'Humidity': humidity
})

# Plot the 'Temperature' and 'Humidity' with different y-axes
fig, ax1 = plt.subplots()

# Plot Temperature on left y-axis
ax1.plot(df['Date'], df['Temperature'], color='red', label='Temperature')
ax1.set_xlabel('Date')
ax1.set_ylabel('Temperature (°C)', color='red')
ax1.tick_params(axis='y', labelcolor='red')

# Create a second y-axis for Humidity
ax2 = ax1.twinx()
ax2.plot(df['Date'], df['Humidity'], color='blue', label='Humidity')
ax2.set_ylabel('Humidity (%)', color='blue')
ax2.tick_params(axis='y', labelcolor='blue')

# Set the title of the plot
plt.title('Temperature and Humidity Over Time')

# Show the plot
plt.show()

#K§g Create a NumPy array data containing 1000 samples from a normal distribution. Perform the following
#tasks using Matplotlib:
#a) Plot a histogram of the data with 30 bins.

#b) Overlay a line plot representing the normal distribution's probability density function (PDF).

#c) Label the x-axis as 'Value' and the y-axis as 'Frequency/Probability'.

#d) Set the title of the plot as 'Histogram with PDF Overlay'.


import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# Create a NumPy array with 1000 samples from a normal distribution
data = np.random.normal(loc=0, scale=1, size=1000)  # Mean = 0, Std = 1

# Plot the histogram of the data with 30 bins
plt.hist(data, bins=30, density=True, alpha=0.6, color='g', label='Histogram')

# Overlay the normal distribution's PDF
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, np.mean(data), np.std(data))  # Normal distribution's PDF
plt.plot(x, p, 'k', linewidth=2, label='Normal PDF')

# Label the x-axis and y-axis
plt.xlabel('Value')
plt.ylabel('Frequency/Probability')

# Set the title of the plot
plt.title('Histogram with PDF Overlay')

# Show the legend
plt.legend()

# Display the plot
plt.show()

# Set the title of the plot as 'Histogram with PDF Overlay'.
# Set the title of the plot
plt.title('Histogram with PDF Overlay')

# Create a Seaborn scatter plot of two random arrays, color points based on their position relative to the
#origin (quadrants), add a legend, label the axes, and set the title as 'Quadrant-wise Scatter Plo

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Generate two random arrays
x = np.random.randn(100)  # 100 random values for x
y = np.random.randn(100)  # 100 random values for y

# Create a DataFrame to store the points and their corresponding quadrants
df = pd.DataFrame({
    'x': x,
    'y': y
})

# Define the quadrants based on x and y values
def get_quadrant(row):
    if row['x'] > 0 and row['y'] > 0:
        return 'Quadrant 1'
    elif row['x'] < 0 and row['y'] > 0:
        return 'Quadrant 2'
    elif row['x'] < 0 and row['y'] < 0:
        return 'Quadrant 3'
    else:
        return 'Quadrant 4'

# Apply the function to categorize points into quadrants
df['Quadrant'] = df.apply(get_quadrant, axis=1)

# Create a scatter plot using Seaborn, color the points by the quadrant
sns.scatterplot(x='x', y='y', hue='Quadrant', data=df, palette='deep')

# Add labels and title
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Quadrant-wise Scatter Plot')

# Show the legend
plt.legend(title='Quadrant')

# Display the plot
plt.show()

#Bokeh - Sine Wave Function Line Chartfrom bokeh.plotting import figure, show
from bokeh.plotting import figure, show
from bokeh.io import output_notebook
import numpy as np

output_notebook()  # To display plot in a notebook

# Generate x values (from 0 to 10) and sine wave values
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Create a Bokeh plot
p = figure(title="Sine Wave Function", x_axis_label='X-axis', y_axis_label='Y-axis')

# Add line to the plot
p.line(x, y, legend_label="Sine wave", line_width=2)

# Add grid lines
p.xgrid.grid_line_color = 'gray'
p.ygrid.grid_line_color = 'gray'

# Show the plot
show(p)

#Bokeh - Bar Chart with Categorical Data and Hover Tooltips
from bokeh.plotting import figure, show
from bokeh.io import output_notebook
from bokeh.models import ColumnDataSource, HoverTool
import random

output_notebook()  # To display plot in a notebook

# Random categorical data
categories = ['Category A', 'Category B', 'Category C', 'Category D']
values = [random.randint(10, 50) for _ in categories]

# Create a ColumnDataSource with data
source = ColumnDataSource(data=dict(categories=categories, values=values))

# Create a Bokeh plot
p = figure(x_range=categories, title="Random Categorical Bar Chart", y_axis_label='Values')

# Add bar chart
p.vbar(x='categories', top='values', width=0.5, color="navy", source=source)

# Add hover tooltips
hover = HoverTool()
hover.tooltips = [("Category", "@categories"), ("Value", "@values")]
p.add_tools(hover)

# Show the plot
show(p)

#3. Plotly - Basic Line Plot
import plotly.graph_objects as go
import numpy as np

# Generate random data
x = np.linspace(0, 10, 100)
y = np.random.rand(100)

# Create a line plot using Plotly
fig = go.Figure()

fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Random Data'))

# Label axes and set title
fig.update_layout(title='Simple Line Plot', xaxis_title='X-axis', yaxis_title='Y-axis')

# Show the plot
fig.show()

#Plotly - Interactive Pie Chart
import plotly.graph_objects as go
import random

# Generate random data for pie chart
labels = ['A', 'B', 'C', 'D']
values = [random.randint(10, 50) for _ in labels]

# Create an interactive pie chart
fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])

# Set title and show the plot
fig.update_layout(title_text='Interactive Pie Chart')
fig.show()

